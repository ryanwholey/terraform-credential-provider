#!/bin/bash

set -e

print_usage() {
  cat <<EOF >&2
Encrypts a value via KMS and stores the result in a json file.
store-secrets [flags]
Usage:
$ echo foo=bar | store-secrets
options:
-h, --help              Show usage
-k, --kms-key-id=ID     KMS key ID. Default: runs "terraform output -raw key_id".
-f, --file=FILE         File to operate on. Default: "./encrypted-secrets.tf.json"
-p, --profile=PROFILE   AWS profile to use to encrypt the passed secret
-d, --dry-run           Print to console instead of update the file. Default: no
Env vars can be used, prefixed with "PC_", snake cased.
EOF
}

file="${PC_FILE:-./encrypted-secrets.tf.json}"
key_id="${PC_KMS_KEY_ID:-}"
secret="${PC_SECRET:-}"
is_dry_run="${PC_DRY_RUN:-false}"
aws_args=""

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      print_usage
      exit 0
      ;;
    -k|--kms-key-id)
      shift
      key_id="$1"
      shift
      ;;
    -d|--dry-run)
      is_dry_run=true
      shift
      ;;
    -f|--file)
      shift
      file="$1"
      shift
      ;;
    -p|--profile)
      shift
      aws_args="$aws_args --profile=$1"
      shift
      ;;
    *)
      echo >&2 "Error: $1 not recognized"
      exit 1
      ;;
  esac
done

if [[ $secret = "" ]] ; then
  secret=$(</dev/stdin)
fi

name="$(cut -d '=' -f 1 <<< "$secret")"
value="$(cut -d '=' -f 2 <<< "$secret")"

if [[ $key_id == "" ]] ; then
  key_id=$(terraform output -raw key_id)
fi

ciphertext=$(aws kms encrypt \
  $aws_args \
  --key-id "$key_id" \
  --query CiphertextBlob \
  --output text \
  --plaintext "$(echo -n "$value" | base64)")

if [[ ! -f "$file" ]] ; then
  echo >&2 "Creating secrets json file: $file."
  echo '{"locals": {"secrets":{}}}' > "$file"
fi

output=$(jq \
  --arg key "$name" \
  --arg value "$ciphertext" \
  '.locals.secrets += {($key): ($value)}' < "$file")

if [[ $is_dry_run = true ]] ; then
  echo "$output" | jq
else 
  echo "$output" | jq > "$file"
fi